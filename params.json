{
  "name": "Tokenjar",
  "tagline": "Burp Suite extension. Useful for managing tokens like anti-CSRF, CSurf, Session values. Can be used to set params that require random numbers or params that are computed based on special forumla.",
  "body": "## Welcome to TokenJar Page.\r\nIf you’re using Burp Suite Free or Pro you have already noticed that sometimes maintaining a session can be a difficult task.\r\nThis extension is the easiest way to manage tokens used for different purposes. Examples include: anti-CSRF, CSurf value, parameters that require a unique/random value and even Session values that are computed based on a formula.\r\n\r\nTokenJar was designed to overcome the limitations of build-in Cookie Jar. It proves very useful when working together with Session Handling Rules.\r\n\r\n## Download the plugin\r\n\r\nThe ready to use jar can be downloaded from [here](https://github.com/DanNegrea/TokenJar/releases/download/1.0/TokenJar_1.0.jar)\r\n\r\nGo ahead and improve this extension. You can browse through the code [here](https://github.com/DanNegrea/TokenJar).\r\n\r\n## Install instructions\r\n1. Download the jar.\r\n2. In Burp navigate to the Extender tab.\r\n3. Select \"Add\" \r\n4. Extension Type should be set to \"Java\" and choose \"Select file…\".\r\n5. Navigate to the downloaded jar and click \"Open\" and \"Next\".\r\n\r\nIf everything is OK, the extension should appear in the list and the \"Loaded\" checkbox should be checked. \r\n\r\n## Getting Started\r\nThe plugin has it's own Tab called \"Token Jar\" with a user interface designed around a table that will show you all the information needed.\r\n\r\n1. Add a new line\r\n2. Provide the name of the parameter and where it is located: url, body, cookie, other (can be one or more)\r\n3. Leave the value empty, this will be updated by the plugin.\r\n4. Think about how the value will be calculated. The default formula is to use the first matching group from Regex. Here you can use javascript to concatenate, generate random values, do conversions, etc. \r\n5. Define the regular expression used to extract relevant values from server responses. You can extract one or more groups. \r\n6. Test your regular expression by clicking \"Regex\". Once done save and close the window.\r\n7. Enable the line and the master enable checkbox. \r\n8. Test it.\r\n\r\n### Example\r\n1. I added a new line with the scope of extracting the anti-CSRF value from a hidden input. \r\n![](https://raw.githubusercontent.com/DanNegrea/TokenJar/gh-pages/images/Getting%20started%201%20-%20adding%20a%20new%20line.png)\r\n2. I tested the Regex and the Eval. To do this I used a response snippet.\r\n![](https://raw.githubusercontent.com/DanNegrea/TokenJar/gh-pages/images/Getting%20started%202%20-%20testing%20regex.png)\r\n3. Enable the line and the master switch \r\n![](https://raw.githubusercontent.com/DanNegrea/TokenJar/gh-pages/images/Getting%20started%20%203%20-%20enable.png)\r\n4. Test it and see if the Value get's updated\r\n![](https://raw.githubusercontent.com/DanNegrea/TokenJar/gh-pages/images/Getting%20started%204%20-%20it's%20working.png)\r\n\r\n## Notes\r\n* Master enable will be unchecked when Burp restarts\r\n* State should be preserved after restart, nevertheless, you can save and load the configuration later using the bottom-right bottoms\r\n\r\n## Requirements for usage\r\n* Burp Suite Free or Pro\r\n* JRE or JDK 1.8\r\n\r\n### Requirements for building\r\n* Google Guava 18.0+",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}